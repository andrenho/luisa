#include "../catch.hpp"

#include "libtrf.h"

TEST_CASE("empty file", "[libtrf]") {
    
    TRFFile f;

    const vector<uint8_t> bin = { 
        0x7F,  'T',  'R',  'F', 0x01, 0x01, 0x00, 0x00,       // header, version, type
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,       // entry point, reserved
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,       // sections
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };

    REQUIRE(f.GenerateBinary() == bin);
}


TEST_CASE("sections (simple)", "[libtrf]") {
    
    TRFFile f;

    f.text.push_back('A');
    f.text.push_back('B');
    f.text.push_back('C');

    f.data.push_back('X');

    const vector<uint8_t> bin = { 
        0x7F,  'T',  'R',  'F', 0x01, 0x01, 0x00, 0x00,    // header, version, type
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,    // entry point, reserved
        0x74, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,    // section .text
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x77, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,    // section .data
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        // sections contents
        'A', 'B', 'C', 'X'
    };

    REQUIRE(f.GenerateBinary() == bin);
}


TEST_CASE("sections (full)", "[libtrf]") {

    TRFFile f;
    f.SetObjectType(TRFFile::ObjectType::EXECUTABLE);
    f.SetEntryPoint(0x09);

    f.text.insert(end(f.text), { 0x2A, 0x10, 0x00, 0x00, 0xF0 });
    f.AddTextReloc("hello");
    f.text.insert(end(f.text), { 0x2C, 0x14, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x02, 0xF0 });
    f.text.insert(end(f.text), { 0x2A, 0x18, 0x00, 0x00, 0xF0, 0x06, 0x00 });
    f.text.insert(end(f.text), { 0x22, 0x1A, 0x00, 0x00, 0xF0, 0x01 });

    f.AddSymbol(TRFFile::SectionType::RODATA, "hello", TRFFile::Symbol::Scope::LOCAL);
    f.rodata.insert(end(f.rodata), { 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x21 });

    string const c = "Generated by tas 1.0.0";
    f.comment.insert(end(f.comment), begin(c), end(c));

    const vector<uint8_t> bin = {
        0x7F, 0x54, 0x52, 0x46,         // header 
        0x01, 0x01, 0x01, 0x00,         // version, CPU type, object type
        0x09, 0x00, 0x00, 0x00,         // entry point
        0x00, 0x00, 0x00, 0x00,         // reserved 

        0x74, 0x00, 0x00, 0x00,         // section .text
        0x1E, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,         // section .bss
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,         // section .data
        0x00, 0x00, 0x00, 0x00,
        0x92, 0x00, 0x00, 0x00,         // section .rodata
        0x06, 0x00, 0x00, 0x00,
        0x98, 0x00, 0x00, 0x00,         // section .comment
        0x16, 0x00, 0x00, 0x00,
        0xAE, 0x00, 0x00, 0x00,         // section .strtab
        0x05, 0x00, 0x00, 0x00,
        0xB3, 0x00, 0x00, 0x00,         // section .symtab
        0x0C, 0x00, 0x00, 0x00,
        0xBF, 0x00, 0x00, 0x00,         // section .reloc
        0x08, 0x00, 0x00, 0x00,         
        0x00, 0x00, 0x00, 0x00,         // section .debug
        0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // other sections
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        // section .text
        0x2A, 0x10, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00,   // movd [MMU_MCPY_ORIG], hello
        0x2C, 0x14, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x02, 0xF0,   // movd [MMU_MCPY_DEST], [VD_TEXT]
        0x2A, 0x18, 0x00, 0x00, 0xF0, 0x06, 0x00,               // movw [MMU_MCPY_SZ], 6
        0x22, 0x1A, 0x00, 0x00, 0xF0, 0x01,                     // movb [MMU_MCPY], 1

        // section .rodata
        0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x21,     // "hello!"

        // section .comment
        'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'd', ' ', 'b', 
        'y', ' ', 't', 'a', 's', ' ', '1', '.', '0', '.', '0', 

        // section .strtab
        0x68, 0x65, 0x6C, 0x6C, 0x6F,           // "hello"

        // section .symtab
        0x01,                       // symbol local
        0x03,                       // section .rodata
        0x00, 0x00,
        0x00, 0x00, 0x00, 0x00,     // index in strtab: 0x0
        0x05, 0x00, 0x00, 0x00,     // string length 0x5

        // section .reloc
        0x05, 0x00, 0x00, 0x00,     // offset for reference to "hello" in .text is 0x5
        0x00, 0x00, 0x00, 0x00      // index 0x0 in symbol table
    };

    REQUIRE(f.GenerateBinary() == bin);
}


TEST_CASE("join objects", "[libtrf]") {
    REQUIRE(false);  // TODO
}


// vim: ts=4:sw=4:sts=4:expandtab
