#!/usr/bin/env lua

-- this is going to be a long day...

------------------------------------------------------------------
--
-- UTILITIES
--
------------------------------------------------------------------

--
-- strict
--
local mt = getmetatable(_G)
if mt == nil then
  mt = {}
  setmetatable(_G, mt)
end

__STRICT = true
mt.__declared = {}

mt.__newindex = function (t, n, v)
  if __STRICT and not mt.__declared[n] then
    local w = debug.getinfo(2, "S").what
    if w ~= "main" and w ~= "C" then
      error("assign to undeclared variable '"..n.."'", 2)
    end
    mt.__declared[n] = true
  end
  rawset(t, n, v)
end
  
mt.__index = function (t, n)
  if not mt.__declared[n] and debug.getinfo(2, "S").what ~= "C" then
    error("variable '"..n.."' is not declared", 2)
  end
  return rawget(t, n)
end

function global(...)
   for _, v in ipairs{...} do mt.__declared[v] = true end
end

--
-- inspect
--
function filter(table, func)
  local new_table = {}
  for _,v in ipairs(table) do
    if func(v) then new_table[#new_table+1] = v end
  end
  return new_table
end

function filter_tbl(table, func)
  local new_table = {}
  for k,v in pairs(table) do
    if func(k, v) then new_table[k] = v end
  end
  return new_table
end

function map(table, func)
  local new_table = {}
  for _,v in ipairs(table) do
    new_table[#new_table+1] = func(v)
  end
  return new_table
end

function map_tbl(table, func)
  local new_table = {}
  for k,v in pairs(table) do
    new_table[#new_table+1] = func(k, v)
  end
  return new_table
end

local function is_array(t)
  for k,_ in pairs(t) do
    if type(k) ~= 'number' then return false end
  end
  return true
end

local parse_table  -- forward declaration

local function value(v, max_depth, cur_depth)
  if type(v) == 'string' then
    return "'" .. tostring(v) .. "'"
  elseif type(v) == 'nil' then
    return 'nil'
  elseif type(v) == 'table' then
    return parse_table(v, max_depth, cur_depth)
  else
    return tostring(v)
  end
end

parse_table = function(v, max_depth, cur_depth)
  if cur_depth == max_depth then
    if is_array(v) then
      return '{' .. (#v > 0 and '#'..tostring(#v) or '') .. '}'
    else
      if v.inspect then
        return '{ ' .. v:inspect() .. ' }'
      else
        return '{ ' .. (v.classname and (v:classname() or '?') or '') .. '... }'
      end
    end
  else
    if is_array(v) then
      return '{ ' .. table.concat(map(v, function(w) 
        return value(w, max_depth, cur_depth+1)
      end), ', ') .. ' }'
    else
      if v.inspect then
        return '{ ' .. v:inspect() .. ' }'
      else
        return '{ ' .. 
          ((not v.class) and '@' or '') ..
          (v.classname and (v:classname() or '?') .. ': ' or '') ..   -- name of the class
          -- values
          table.concat(
            map_tbl(
              filter_tbl(v, 
                function(k,v) 
                  return k ~= 'class' and k ~= 'class_desc' and k ~= 'is_a' and k ~= '__index' and k ~= '_init' and k ~= 'classname' and
                         type(v) ~= 'function'
                end),
              function(k, v2)
                local key = (type(k) == 'string' and k or ('[' .. value(k, 1, 0) .. ']'))
                local val = value(v2, max_depth, cur_depth+1)
                return key .. '=' .. val
              end), 
            ', ') .. ' }'
      end
    end
  end
end

function inspect(...)
  return table.concat(map({...}, 
    function(v) return value(v, 2, 0) end), '\t')
end

function p(...)
  io.write(inspect(...))
  io.write("\n")
  io.flush()
end

--
-- deep equals
--
local function equals(t1, t2)
   if t1 == t2 then
       return true
   end
   if type(t1) ~= "table" or type(t2) ~= "table" then
       return false
   end
   local v2
   for k,v1 in pairs(t1) do
       v2 = t2[k]
       if v1 ~= v2 and not equals(v1, t2[k]) then
           return false
       end
   end
   for k in pairs(t2) do
       if t1[k] == nil then
           return false
       end
   end
   return true
end


------------------------------------------------------------------
-- 
-- ENCODER
--
------------------------------------------------------------------

function encode(s)
end

------------------------------------------------------------------
-- 
-- ASSEMBLER
--
------------------------------------------------------------------

------------------------------------------------------------------
-- 
-- TEST INTERFACE
--
------------------------------------------------------------------

TestInterface = {}

function TestInterface:new()
  local o = {}
  setmetatable(o, self)
  self.__index = self
  return o
end


function TestInterface:title(s)
  print()
  print('  ' .. s)
  print('  ' .. ('-'):rep(#s))
  print()
end


function TestInterface:same(s)

end


------------------------------------------------------------------
--
-- TESTS
--
------------------------------------------------------------------

function run_tests()

  local t = TestInterface:new()

  --
  -- encoder
  -- 

  t:title('Encoder: valid commands')
  
  local function ok(t, s, v)
    t:same(encode(s), v, s)
  end

  ok(t, 'mov A, 0xABCD', { 0x03, 0x00, 0xCD, 0xAB });

end

------------------------------------------------------------------
--
-- MAIN PROCEDURE
--
------------------------------------------------------------------

-- parse commandline options
if arg[1] == '-t' then
  run_tests()
end

-- vim: ts=2:sw=2:sts=2:expandtab
