#!/usr/bin/env lua

------------------------------------------------------------------
--
-- STORAGE CREATION
--
------------------------------------------------------------------
function make_storage(origin_dir, boot)

  local fs = {
    ['test.txt'] = { file=true, data={ 65, 66, 67 } },
    ['test'] = {
      ['new_test.txt'] = { data={ 85, 84, 83 } },
    },
  }

  
  
  return {}

end


------------------------------------------------------------------
--
-- MAIN PROCEDURE
--
------------------------------------------------------------------

--{{{ parse command-line arguments

function print_help()
  print('Usage: '..arg[0]..' [OPTION...] DIRECTORY')
  print()
  print('   -o FILENAME      output file (if not specified, outputs to stdout)')
  print('   -b FILENAME      boot file')
  print('   -h               this help')
end


function parse_args()
  local i, a = 1, {}
  while i <= #arg do
    if arg[i] == '-h' or arg[i] == '--help' then
      a.help = true
    elseif arg[i] == '-b' then
      a.boot = arg[i+1]
      i = i+1
    elseif arg[i] == '-o' then
      a.output = arg[i+1]
      i = i+1
    elseif arg[i]:sub(1,1) == '-' then
      error('Invalid option '..arg[i]..'.')
    else
      a.input = arg[i]
    end
    i = i+1
  end
  return a
end


function execute_args()
  local a = parse_args()
  if a.help then
    print_help()
    os.exit(true)
  elseif a.input then
    local f = a.output and assert(io.open(a.output, 'wb')) or io.stdout
    local t = string.char(table.unpack(make_storage(a.input, a.boot)))
  else
    io.stderr:write('Usage: '..arg[0]..' [OPTION...] DIRECTORY\n')
    os.exit(false)
  end
end

--}}}

execute_args()

-- vim: ts=2:sw=2:sts=2:expandtab:foldmethod=marker
